import os


TOKEN = os.environ['drmbl_token']
chat_id = os.environ['test_chat_id']
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.handler import CancelHandler
import asyncio
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Union
import requests


bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
store_file_id = list()

button_hi = InlineKeyboardButton(text='–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é', callback_data='story')
button_profile = InlineKeyboardButton(text='–ê–Ω–∫–µ—Ç–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤', callback_data='personal_profile')
button_pic_of_dics = InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏', callback_data='send_dudes')

button_menu = KeyboardButton(text = '/menu')

greet_kb = InlineKeyboardMarkup()
greet_kb.add(button_hi)
greet_kb.add(button_pic_of_dics)
greet_kb.add(button_profile)
menu_kb = ReplyKeyboardMarkup(resize_keyboard = True)
menu_kb.add(button_menu)


@dp.callback_query_handler(text=['send_dudes', 'personal_profile', 'story'])
async def random_value(call: types.CallbackQuery):
    if call.data == 'send_dudes':
        await call.message.answer(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é/—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.')
    with open('send_dudes.txt', 'r', encoding = 'utf-8') as msg_txt:
      if call.data == 'personal_profile':
          await call.message.answer(
              text= msg_txt.read())
    if call.data == 'story':
        await call.message.answer(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n–ï—Å–ª–∏ –∂–µ–ª–∞–µ—Ç–µ –î–û–ë–ê–í–ò–¢–¨ –§–û–¢–û–ì–†–ê–§–ò–Æ –∫ –≤–∞—à–µ–º—É —Ä–∞—Å—Å–∫–∞–∑—É:\n- –õ–∏–±–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é –∫ —Ñ–æ—Ç–æ\n- –õ–∏–±–æ, –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–Ω–∞–∫–æ–≤, —á—Ç–æ–±—ã –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ç–µ–∫—Å—Ç –∫ —Ñ–æ—Ç–æ, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, –ù–û –û–¢–ú–ï–¢–¨–¢–ï –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.–ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Å–º–∞–π–ª (üåö,üëæ,üíã,üî• –∏ —Ç.–¥) –ø–µ—Ä–µ–¥ –∏—Å—Ç–æ—Ä–∏–µ–π –∏ —Ç–∞–∫–æ–π –∂–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∫ –≤–∞—à–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.', reply_markup = menu_kb)
    await call.answer()


@dp.message_handler(commands=['start', 'menu'])
async def send_welcome(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç!\n \n –Ø —á–∞—Ç-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏ –∏—Å—Ç–æ—Ä–∏–∏, –∞–Ω–∫–µ—Ç—ã –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ "
        "–∞–Ω–æ–Ω–∏–º–Ω–æ –∞–¥–º–∏–Ω–∞–º \"–ü–æ–¥ —Ä–∞–¥—É–∂–Ω—ã–º –ø–ª–µ–¥–æ–º\".\n \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –∂–µ–ª–∞–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –Ω–∞–º —Å–≤–æ—é "
        "–∏—Å—Ç–æ—Ä–∏—é‚ù§",
        reply_markup=greet_kb)

@dp.message_handler()
async def echo(message: types.Message):
    await message.answer('–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞', reply_markup =  menu_kb)
    messag = message.text.replace("#", "%23")
    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage?chat_id={chat_id}&text={messag}"
    print(requests.get(url).json())
    print(message.text)


class AlbumMiddleware(BaseMiddleware):

    album_data: dict = {}

    def __init__(self, latency: Union[int, float] = 0.01):
        self.latency = latency
        super().__init__()

    async def on_process_message(self, message: types.Message, data: dict):
        if not message.media_group_id:
            return

        try:
            self.album_data[message.media_group_id].append(message)
            raise CancelHandler() 
        except KeyError:
            self.album_data[message.media_group_id] = [message]
            await asyncio.sleep(self.latency)

            message.conf["is_last"] = True
            data["album"]=self.album_data[message.media_group_id]

    async def on_post_process_message(self, message: types.Message, result: dict, data: dict):
        if message.media_group_id and message.conf.get("is_last"):
            del self.album_data[message.media_group_id]


@dp.message_handler(is_media_group=True, content_types=types.ContentType.PHOTO)
async def handle_albums(message: types.Message, album: List[types.Message]):
    media_group = types.MediaGroup()
    txt = message.caption
    for obj in album:
        if obj.photo:
            file_id = obj.photo[-1].file_id
        else:
            file_id = obj[obj.content_type].file_id

        try:
          
            media_group.attach({"media": file_id, "type": obj.content_type, "caption" : txt })
        except ValueError:
            return await message.answer('–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ')

    await bot.send_media_group(chat_id, media = media_group)
    await message.answer('–í–∞—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã!')
  



@dp.message_handler(content_types=["photo"])
async def get_photo(message):
    file_id = message.photo[-1].file_id
    await bot.send_photo(chat_id, file_id, caption = message.caption)
    await message.answer('–í–∞—à–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!')



if __name__ == '__main__':
    dp.middleware.setup(AlbumMiddleware())
    executor.start_polling(dp, skip_updates=True)

